#include <Tone.h>
int pinA = 5;
int pinB = 6;
int pinC = 7;
int pinLeft = 8;
int pins = 4;

static int melodyA[] ={
  NOTE_D4, NOTE_E4,0,NOTE_E4,NOTE_FS4,NOTE_A4,NOTE_G4,NOTE_FS4,NOTE_D4,NOTE_D4,NOTE_E4,
  0,NOTE_E4,NOTE_D4,NOTE_A3,NOTE_A3,NOTE_B3,NOTE_D4,NOTE_B3,NOTE_D4,NOTE_D4, NOTE_E4,0,NOTE_E4,NOTE_FS4,NOTE_A4,NOTE_G4,NOTE_FS4,NOTE_D4,NOTE_D4,NOTE_E4,
  0,NOTE_E4,NOTE_FS4,NOTE_FS4,NOTE_D4,NOTE_D4,0,0,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_D5,NOTE_E5,NOTE_CS5,NOTE_B4,NOTE_A4,NOTE_A4,NOTE_A4,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_B4
  ,0,NOTE_A4,NOTE_A5,NOTE_A5,NOTE_E5,0,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_B4,NOTE_D5,NOTE_E5,0,NOTE_CS5,NOTE_B4,NOTE_CS5,NOTE_B4,NOTE_A4,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5
  ,NOTE_B4,NOTE_A4,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_FS5,NOTE_E5,NOTE_D5,NOTE_D5,NOTE_E5,NOTE_FS5,NOTE_D5,NOTE_E5,NOTE_E5,NOTE_E5,NOTE_FS5,NOTE_E5,NOTE_A4,NOTE_D5,0,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_B4,0,NOTE_E5,NOTE_FS5,NOTE_E5
  ,NOTE_A4,NOTE_B4,NOTE_D5,NOTE_B4,NOTE_FS5,NOTE_FS5,NOTE_E5,NOTE_A4,NOTE_B4,NOTE_CS5,NOTE_A4,NOTE_E5,NOTE_E5,NOTE_D5,NOTE_CS5,NOTE_B4,NOTE_A4,NOTE_B4,NOTE_D5,NOTE_B4,NOTE_D5,NOTE_E5,NOTE_CS5,NOTE_A4,NOTE_A4
  ,NOTE_E5,NOTE_D5,NOTE_A4,NOTE_B4,NOTE_D5,NOTE_B4,NOTE_FS5,NOTE_FS5,NOTE_E5,NOTE_A4,NOTE_B4,NOTE_CS5,NOTE_A4,NOTE_A5,NOTE_CS5,NOTE_D5,NOTE_CS5,NOTE_B4,NOTE_A4,NOTE_CS5,NOTE_D5,NOTE_B4,NOTE_D5,NOTE_E5,NOTE_CS5,NOTE_B4,NOTE_A4,NOTE_A4,NOTE_E5,NOTE_D5
};
int melodyC[] = {
  NOTE_B4,NOTE_CS4,0,NOTE_CS4,NOTE_E4
};
static int melodyB[] ={
  NOTE_G3,NOTE_A3,NOTE_A3,NOTE_A3,NOTE_B3,0,0,0,0,NOTE_G3,NOTE_A3,NOTE_A3,NOTE_A3,NOTE_FS3,0,0,0,0,0,0,NOTE_G3,NOTE_A3,NOTE_A3,NOTE_A3,NOTE_B3,0,0,0,0,NOTE_G3,
  NOTE_A3,NOTE_A3,NOTE_A3,NOTE_A3,NOTE_A3,NOTE_FS3,NOTE_FS3,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_D5,NOTE_E5,NOTE_CS5,NOTE_B4,NOTE_A4,0,0,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5
  ,NOTE_B4,0,NOTE_A4,NOTE_D5,NOTE_A5,NOTE_CS5,0,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_B4,NOTE_D5,NOTE_E5,0,NOTE_CS5,NOTE_B4,NOTE_CS5,NOTE_B4,NOTE_A4,0,NOTE_B4,NOTE_B4,NOTE_CS5,NOTE_D5
  ,NOTE_B4,NOTE_A4,NOTE_G4,NOTE_G4,NOTE_G4,NOTE_A4,NOTE_A4,NOTE_G4,NOTE_G4,NOTE_G4,NOTE_G4,NOTE_G4,NOTE_A4,NOTE_A4,NOTE_A4,NOTE_A4,NOTE_A4,NOTE_FS4,NOTE_G4,NOTE_A4,NOTE_B4,NOTE_CS5,NOTE_D5,NOTE_B4,0,NOTE_E5,NOTE_FS5,NOTE_A4,NOTE_A4,NOTE_B4,NOTE_D5,NOTE_B4
  ,NOTE_D5,NOTE_D5,NOTE_CS5,NOTE_A4,NOTE_B4,NOTE_CS5,NOTE_A4,NOTE_FS4,NOTE_FS4,NOTE_FS4,NOTE_CS5,NOTE_B4,NOTE_A4,NOTE_B4,NOTE_D5,NOTE_B4,NOTE_FS4,NOTE_E5,NOTE_A4,NOTE_A4,NOTE_A4,NOTE_FS4,NOTE_FS4,NOTE_A4,NOTE_B4,NOTE_CS5,NOTE_B4,NOTE_D5,NOTE_D5,NOTE_CS5,NOTE_A4,NOTE_B4,
  NOTE_CS5,NOTE_A4,NOTE_FS4,NOTE_CS5,NOTE_B4,NOTE_CS5,NOTE_B4,NOTE_A4,NOTE_B4,NOTE_D5,NOTE_B4,NOTE_FS4,NOTE_E5,NOTE_E4,NOTE_B4,NOTE_A4,NOTE_A4,NOTE_A4,NOTE_FS4
};

float duration[] ={
  3,3,4,3,3,16,16,16,16,3,3,4,3,6,16,16,16,16,16,16,3,3,4,3,3,16,16,16,16,3,3,4,8,8,8,8,2,8,8,8,8,8,8,8,6,16,2,4,8,8,8,8,8,8,8,8,8,4,8,2,8,8,8,8,8,8,8,8,8,8,8,8,16,16,2,8,8,8,8,8,8,4,8,8,8,8,2,8,2,8,8,8,8,8,8,8,4,4,2,8,8,8,8,8,8,8,8,3,16,16,16,16,5.3,5.3,6,16,16,16,16,5.3,5.3,5.3,16,8,16,16,16,16,
  4,8,4,4,8,4,2,16,16,16,16,5.3,5.3,4,16,16,16,16,4,8,5.3,16,8,16,16,16,16,4,8,5.3,16,4,8,4,2
};

Tone toneA;
Tone toneB;
Tone toneC;
int totalDuration;
void setup() {
  toneA.begin(5);
  toneB.begin(6);
  //toneC.begin(7);
  //toneA.play(melodyA[0]);
  //toneB.play(melodyB[0]);
  //toneC.play(melodyC[0]);
  totalDuration = sizeof(duration);
  play();
}

void loop() {
 toneA.stop();
 toneB.stop();
}
void play(){
    for (int thisNote = 0; thisNote <= 170; thisNote++){
      float noteDuration = 2000 / duration[thisNote];
      toneA.play(melodyA[thisNote],noteDuration);
      toneB.play(melodyB[thisNote],noteDuration);
      //toneC.play(melodyC[thisNote],noteDuration);
      delay(noteDuration * 1.1);
    }
  toneA.stop();
  toneB.stop();
}

